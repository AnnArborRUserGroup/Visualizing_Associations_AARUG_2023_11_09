---
title: "Visualizing Associations"
subtitle: "Ann Arbor R Users Group Meeting, 9 Nov 2023"
format: revealjs
editor: source
author: 
  - name: Barry DeCicco
    orcid: 0000-0002-5013-1151
    email: bdecicco2001@yahoo.edu
    affiliations: 
      - name: Michigan State University, Center for Statistical Training and Consulting
---

# What Will This Presentation Cover

## Correlations and Associations

## How to Display The Results

-   Plots
-   Heatmaps
-   Other figures

## Packages Used

-   ggplot2
-   geom_tile for heatmaps
-   pheatmap
-   ggally
-   ggpairs() function
-   corrgram
-   Easystats

# Data Sets:

-   MLB Attendance data for CY 2016 ((see references))
-   The flea data set (from the GGally package)


## Load Packages - General

```{r}
#| label: load-packages-general
#| echo: true

# Load some packages
library(devtools)   #  
library(here)       # for here(), i_am()
library(dplyr)        # for %>%, arrange(), filter(), group_by(), mutate(), etc.
library(tidyr)        # for pivot_longer(), pivot_wider(), etc.
library(rmarkdown)    # for render()
library(knitr)      
library(kableExtra) 
library(knitr)        # for kable(), which makes nice tables.
#opts_knit$set(eval.after = 'fig.cap') 
options(kableExtra.latex.load_packages = FALSE)
library(kableExtra)
library(quarto)      # for quarto_version()

library("readxl")    # for importing from Excel

```

## Load Packages - Less Common, Good for Correlations

```{r}
#| label: load-packages-less-common
#| echo: true

# Load some packages
library(GGally)   
library(pheatmap)  
library(corrplot)
library(PerformanceAnalytics)

```

## Load Packages - Easystats

<https://github.com/easystats>

```{r}
#| label: load-packages-easystats
#| echo: true

# Load some packages
library(see)               # for visualization
library(correlation)       # for correlations

```

## Load data set, create a trimmed version

-   Attendance data for CY 2016 
-   See: <https://dasl.datadescription.com/datafile/attendance-2016/?_sfm_methods=Correlation&_sfm_cases=4+59943>


```{r}
#| label: load-data
#| echo: true
#| eval: true

attendance_df <- read_excel("..\\data\\attendance-2016.xlsx")

head(attendance_df)
tail(attendance_df)

```


```{r}
#| label: trim-data
#| echo: true
#| eval: true

trimmed_attendance_df <- attendance_df %>% 
  select(Won, Lost, Runs, H, "2B", "3B", HR, "Home Avg Att", "Road Avg Att") %>% 
  dplyr::rename(Double = "2B",
                Triple = "3B",
                Home_Avg_Att = "Home Avg Att",
                Rd_Avg_Att = "Road Avg Att")
  

head(trimmed_attendance_df)
tail(trimmed_attendance_df)

```

## What is a correlation matrix?

-   It's a square matrix of numbers, with certain properties.
-   Each entry X ~ij~ is the correlation between the ith and jth variables.
-   In this case, we could use associations rather than correlations,
where the association is bounded by [-1,1] or [0,1], and X ~ii~ = 1
-   The correlation matrix might be computed using listwise deletion or by pairwise deletion.  In the latter case, the matrix might not meet other requirements (i.e., not positive semi-definite) which will not be dealt with here.


# Create the Correlation Matrix from Numeric Variables

```{r}
#| label: create-correlation-matrix
#| echo: true
#| eval: true


numeric_attendance_df <- trimmed_attendance_df %>% 
  select(where(is.numeric))

corr_pearson <- cor(numeric_attendance_df, use = "pairwise.complete.obs",
                     method = c("pearson")) 


```

## Options for the cor() function 

(see: <https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/cor>)

-   cor(x, y = NULL, use = "everything",
    method = c("pearson", "kendall", "spearman"))

-   The options of 'use' are:
  -   "everything", 
  -   "all.obs", 
  -   "complete.obs", 
  -   "na.or.complete"
  -   "pairwise.complete.obs"

-   For 'method', you have to choose one.

## A note on missing data:

-   If you have missing data, and don't give an option to deal with it, you will
get NA's for some (or all) entries.

-   However, if you do, you might have a matrix which is not positive semi-definite, which can cause problems in some statistical procedures.  

-   See <https://stats.stackexchange.com/questions/69114/why-does-correlation-matrix-need-to-be-positive-semi-definite-and-what-does-it-m>


## Heatmaps

<https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/heatmap>

The "col" option allows you to control the colors.

## 
```{r}
#| label: fig-create-heatmap
#| echo: true
#| eval: true
#| fig-cap: "Heatmap"
#| fig-height: 6
#| fig-width: 6

colors<- colorRampPalette(c("blue", "white", "red"))(20)

heatmap(corr_pearson, col = colors, symm = TRUE)

```
## Corrplots

```{r}
#| label: fig-corrplot1
#| echo: true
#| eval: true
#| fig-cap: "Corrplot - Simple"
#| fig-height: 6
#| fig-width: 6

corrplot(corr_pearson, type = "upper", order = "hclust", 
         tl.col = "black", tl.srt = 45)
```


## From the 'PerformanceAnalytics' package 

```{r}
#| label: fig-correlation-chart
#| echo: true
#| eval: true
#| fig-cap: "Correlation Chart"
#| fig-height: 6
#| fig-width: 6
#| 
chart.Correlation(numeric_attendance_df, histogram=TRUE, pch=19)

```



# GGally - ggpairs

This function does a lot with paired comparison matrices.
<https://rdrr.io/github/ggobi/ggally/f/vignettes/ggpairs.Rmd>
<https://r-graph-gallery.com/correlogram.html>

This has a lot of funtions to run pairwise matrices examining the relationship
between pairs of variables.  You have a lot of choice about what goes into
each cell/triangular block: 

##

```{r}
#| label: fig-ggpairs-1
#| echo: true
#| eval: true
#| fig-cap: "Correlogram"
#| fig-width: 6
#| fig-height: 6

ggpairs(numeric_attendance_df, title="correlogram with ggpairs()") 

```


## You can also add features from ggplot2 for more information.

This uses the 'flea' data set.


##

```{r}
#| label: fig-ggpairs-2
#| echo: true
#| eval: true
#| fig-cap: "Correlogram by species"
#| fig-width: 6
#| fig-height: 6

data(flea)

ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species)) 
```


# The Easy Stats Package 

The <https://github.com/easystats> package covers a number of different statistical functions (), aiming to get a unified approach to data analysis.

One nice feature is the **correlation** function.
This example will use the correlation and see functions (the latter for graphs)

The example below uses the Easystats 'partial correlation' feature along with 
a Gaussian Graphical Model:

## 

```{r}
#| label: fig-easystats-1
#| echo: true
#| eval: true
#| fig-cap: "Network Correlation Plot"
#| fig-width: 6
#| fig-height: 6

mtcars %>% 
  correlation(partial = TRUE) %>% 
  plot()


```

Easystats also covers a variety of correlations and association measures,
such as:
-   Bayesian,
-   Tetrachoric,
-   Polychoric, 
-   Biserial,
-   Biweight.

This lets you deal with different types of data in the same command flow.




# References

-   Correlation matrix : A quick start guide to analyze, format and visualize a correlation matrix using R software <http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software>
-   GGally (does many paired comparison matrices):
  -   <https://cran.r-project.org/web/packages/GGally/index.html>
  -   <https://rdrr.io/github/ggobi/ggally/f/vignettes/ggpairs.Rmd>
  -   <https://r-graph-gallery.com/correlogram.html>
-   The R Graph Gallery <https://r-graph-gallery.com/>
-   R-Charts <https://r-charts.com/>
-   easystats <https://github.com/easystats>
-   The correlation package <https://easystats.github.io/blog/posts/correlation_presentation/>
-   The CORRGRAM package <https://r-graph-gallery.com/correlogram.html>
-   MLB Attendance data, CY 2016  <https://dasl.datadescription.com/datafile/attendance-2016/?_sfm_methods=Correlation&_sfm_cases=4+59943>
